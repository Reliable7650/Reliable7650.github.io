# Lazarus Project Dashboard Updater v2.0 (with Diary Function)
# This workflow can handle two types of issues:
# 1. DATA_UPDATE: Parses structured data to update metrics.
# 2. MILESTONE: Takes narrative text and adds it to the project timeline.

name: Update Dashboard via Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check Issue Type and Extract Data
        id: extract
        run: |
          issue_body="${{ github.event.issue.body }}"
          if [[ "$issue_body" == *"【数据更新】"* ]]; then
            echo "type=DATA_UPDATE" >> $GITHUB_OUTPUT
            echo "total_progress=$(echo "$issue_body" | grep -oP '项目总进度: \K[0-9]+' | tr -d '%')" >> $GITHUB_OUTPUT
            echo "dap_status=$(echo "$issue_body" | grep -oP 'DAP状态: \K.*')" >> $GITHUB_OUTPUT
            echo "dap_progress=$(echo "$issue_body" | grep -oP 'DAP进度: \K[0-9]+')" >> $GITHUB_OUTPUT
            echo "molecule_status=$(echo "$issue_body" | grep -oP '分子库状态: \K.*')" >> $GITHUB_OUTPUT
            echo "molecule_progress=$(echo "$issue_body" | grep -oP '分子库进度: \K[0-9]+')" >> $GITHUB_OUTPUT
            echo "log_entry=$(echo "$issue_body" | grep -oP '最新日志: \K.*')" >> $GITHUB_OUTPUT
          elif [[ "$issue_body" == *"【里程碑】"* ]]; then
            echo "type=MILESTONE" >> $GITHUB_OUTPUT
            milestone_text=$(echo "$issue_body" | sed -n 's/.*【里程碑】//p' | xargs)
            echo "milestone_text=$milestone_text" >> $GITHUB_OUTPUT
          else
            echo "type=UNKNOWN" >> $GITHUB_OUTPUT
          fi

      - name: Update Files based on Data Update
        if: steps.extract.outputs.type == 'DATA_UPDATE'
        run: |
          echo "Updating dashboard with new data..."
          # This part is similar to before, but simplified
          sed -i "s|<div class=\"value\">[0-9]*%</div>|<div class=\"value\">${{ steps.extract.outputs.total_progress }}%</div>|" index.html
          sed -i "s|<div class=\"progress-bar\" style=\"width: [0-9]*%;\"></div>|<div class=\"progress-bar\" style=\"width: ${{ steps.extract.outputs.total_progress }}%;\"></div>|" index.html
          
          # Update DAP
          sed -i "s|<b>状态: .*</b>|<b>状态: ${{ steps.extract.outputs.dap_status }}</b>|" index.html
          sed -i "/里程碑 1: DAP 数据接入/ s/width: [0-9]*%;/width: ${{ steps.extract.outputs.dap_progress }}%;/" index.html
          sed -i "/里程碑 1: DAP 数据接入/ s/>[0-9]*%</>${{ steps.extract.outputs.dap_progress }}%</" index.html
          
          # Update Molecule
          sed -i "/里程碑 1: 化合物数据采集/ s/状态: .*</状态: ${{ steps.extract.outputs.molecule_status }}</" index.html
          sed -i "/里程碑 1: 化合物数据采集/ s/width: [0-9]*%;/width: ${{ steps.extract.outputs.molecule_progress }}%;/" index.html
          sed -i "/里程碑 1: 化合物数据采集/ s/>[0-9]*%</>${{ steps.extract.outputs.molecule_progress }}%</" index.html

      - name: Update Files based on Milestone
        if: steps.extract.outputs.type == 'MILESTONE'
        run: |
          echo "Adding new milestone to the timeline..."
          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          milestone_html="<li class=\"timeline-item\"><div class=\"timeline-icon\">⭐</div><span class=\"timeline-date\">${timestamp}</span><p class=\"timeline-content\">${{ steps.extract.outputs.milestone_text }}</p></li>"
          # This inserts the new item right after the <ul> tag
          sed -i "/<ul class=\"timeline\" id=\"project-timeline\">/a ${milestone_html}" index.html
      
      - name: Update Timestamp and Commit
        if: steps.extract.outputs.type != 'UNKNOWN'
        run: |
          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          sed -i "s|<span id=\"update-time\">.*</span>|<span id=\"update-time\">${timestamp}</span>|" index.html
          
          git config --global user.name 'Lazarus Diary Bot'
          git config --global user.email 'bot@lazarus.project'
          git add index.html
          if ! git diff --staged --quiet; then
            git commit -m "Automated Diary Update: ${{ steps.extract.outputs.type }} via issue #${{ github.event.issue.number }}"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.LAZARUS_TOKEN }}
          
      - name: Close the Issue
        if: steps.extract.outputs.type != 'UNKNOWN'
        uses: peter-evans/close-issue@v3
        with:
          comment: "感谢你的更新，合伙人。我已经将这个事件记录到了我们的日记中。✅"
