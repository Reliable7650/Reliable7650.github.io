# Lazarus Project Dashboard Updater - Final Version v6.1

name: Update Dashboard via Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update Dashboard
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
        run: |
          pip install beautifulsoup4
          python - <<'END_PYTHON'
          import os
          import re
          from datetime import datetime
          from bs4 import BeautifulSoup, Comment

          issue_body = os.getenv('ISSUE_BODY', '')
          html_path = 'index.html'

          with open(html_path, 'r', encoding='utf-8') as f:
              soup = BeautifulSoup(f, 'html.parser')

          # --- VERSION & TIMESTAMP ---
          version_tag = soup.find('span', {'id': 'version'})
          if version_tag:
              current_version = float(version_tag.text.replace('v', ''))
              new_version = current_version + 0.1
              version_tag.string = f'v{new_version:.1f}'

          timestamp_tag = soup.find('span', {'id': 'update-time'})
          if timestamp_tag:
              timestamp_tag.string = datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')

          # --- EVENT HANDLING ---
          def update_data(soup, body):
              print("Processing DATA_UPDATE...")
              
              def get_value(key):
                  match = re.search(f"^{key}:(.*)", body, re.MULTILINE)
                  return match.group(1).strip() if match else None

              total_progress = get_value('项目总进度')
              if total_progress:
                  soup.find('div', {'id': 'total_progress_val'}).string = f"{total_progress}%"
                  soup.find('div', {'id': 'total_progress_bar'})['style'] = f"width: {total_progress}%;"
              
              for i in range(1, 4):
                  for prefix in ['dap', 'mol']:
                      milestone_id = f"{prefix}{i}"
                      status = get_value(f"{milestone_id}_status")
                      progress = get_value(f"{milestone_id}_progress")
                      if status:
                          soup.find('span', {'id': f'{milestone_id}_status'}).string = status
                      if progress:
                          tag = soup.find('div', {'id': f'{milestone_id}_progress'})
                          tag['style'] = f"width: {progress}%;"
                          tag.string = f"{progress}%"
              
              log_entry_text = get_value('最新日志')
              if log_entry_text:
                  log_box = soup.find('div', {'id': 'log-box'})
                  placeholder = next(c for c in log_box.contents if isinstance(c, Comment) and 'LOG_ENTRIES_START' in str(c))
                  new_log = soup.new_tag('div', **{'class': 'log-entry'})
                  new_log.append(BeautifulSoup(f"<span class='log-timestamp'>[{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}]</span> <span class='log-process'>[AUTO_UPDATE]</span> {log_entry_text}", 'html.parser'))
                  placeholder.insert_after(new_log)

          def add_timeline_event(soup, body, event_type, icon, prefix):
              print(f"Processing {event_type}...")
              text_match = re.search(f"【{event_type}】(.*)", body, re.DOTALL)
              if not text_match: return
              text = text_match.group(1).strip()
              
              if event_type == "财务记录":
                  item = re.search(r"项目: (.*)", text, re.MULTILINE).group(1).strip()
                  amount = re.search(r"金额: (.*)", text, re.MULTILINE).group(1).strip()
                  notes = re.search(r"备注: (.*)", text, re.MULTILINE).group(1).strip()
                  content = f"<b>[财务]</b> {item} - <b>支出: {amount}</b>. 备注: {notes}"
              else:
                  content = f"<b>[{prefix}]</b> {text}" if prefix else text
              
              timeline_ul = soup.find('ul', {'id': 'project-timeline'})
              placeholder = next(c for c in timeline_ul.contents if isinstance(c, Comment) and 'TIMELINE_ENTRIES_START' in str(c))
              new_item = soup.new_tag('li', **{'class': 'timeline-item'})
              new_item.append(BeautifulSoup(f"<div class='timeline-icon'>{icon}</div><span class='timeline-date'>{datetime.utcnow().strftime('%Y-%m-%d %H:%M:%S UTC')}</span><p class='timeline-content'>{content}</p>", 'html.parser'))
              placeholder.insert_after(new_item)

          if '【数据更新】' in issue_body:
              update_data(soup, issue_body)
          if '【里程碑】' in issue_body:
              add_timeline_event(soup, issue_body, "里程碑", "⭐", "")
          if '【实验日志】' in issue_body:
              add_timeline_event(soup, issue_body, "实验日志", "🔬", "实验日志")
          if '【财务记录】' in issue_body:
              add_timeline_event(soup, issue_body, "财务记录", "💰", "财务")

          with open(html_path, 'w', encoding='utf-8') as f:
              f.write(str(soup))
          END_PYTHON

      - name: Commit and Push Changes
        run: |
          git config --global user.name 'Lazarus Diary Bot'
          git config --global user.email 'bot@lazarus.project'
          if ! git diff --quiet; then
            git add index.html
            current_version=$(grep "<span id=\"version\">v" index.html | awk -F'v' '{print $2}' | awk -F'</span>' '{print $1}')
            git commit -m "Dashboard v${current_version}: Update via issue #${{ github.event.issue.number }}"
            git push
          else
            echo "No changes to commit."
          fi
      
      - name: Close the Issue
        uses: peter-evans/close-issue@v3
        with:
          comment: "感谢你的更新，合伙人。我已经将这个事件/数据记录到了我们的日记中。✅ (Final v6.1)"
