# Lazarus Project Dashboard Updater v4.0 (Final Version)
# Handles Data Updates, Milestones, Lab Logs, and Financial Records.

name: Update Dashboard via Issue

on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Parse Issue Body
        id: extract
        run: |
          issue_body="${{ github.event.issue.body }}"
          if [[ "$issue_body" == *"【数据更新】"* ]]; then
            echo "type=DATA_UPDATE" >> $GITHUB_OUTPUT
            echo "$issue_body" | grep ":" | while IFS=: read -r key value; do
              var_name=$(echo "$key" | tr -d '[:space:]' | tr '[:upper:]' '[:lower:]')
              var_value=$(echo "$value" | xargs)
              echo "${var_name}=${var_value}" >> $GITHUB_OUTPUT
            done
          elif [[ "$issue_body" == *"【里程碑】"* ]]; then
            echo "type=MILESTONE" >> $GITHUB_OUTPUT
            echo "text=$(echo "$issue_body" | sed -n 's/.*【里程碑】//p' | xargs)" >> $GITHUB_OUTPUT
          elif [[ "$issue_body" == *"【实验日志】"* ]]; then
            echo "type=LAB_LOG" >> $GITHUB_OUTPUT
            echo "text=$(echo "$issue_body" | sed -n 's/.*【实验日志】//p' | xargs)" >> $GITHUB_OUTPUT
          elif [[ "$issue_body" == *"【财务记录】"* ]]; then
            echo "type=FINANCE_LOG" >> $GITHUB_OUTPUT
            echo "item=$(echo "$issue_body" | grep -oP '项目: \K.*' | xargs)" >> $GITHUB_OUTPUT
            echo "amount=$(echo "$issue_body" | grep -oP '金额: \K.*' | xargs)" >> $GITHUB_OUTPUT
            echo "notes=$(echo "$issue_body" | grep -oP '备注: \K.*' | xargs)" >> $GITHUB_OUTPUT
          else
            echo "type=UNKNOWN" >> $GITHUB_OUTPUT
          fi

      - name: Generate HTML Snippet for Timeline
        id: html_snippet
        if: "steps.extract.outputs.type == 'MILESTONE' || steps.extract.outputs.type == 'LAB_LOG' || steps.extract.outputs.type == 'FINANCE_LOG'"
        run: |
          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          html=""
          if [ "${{ steps.extract.outputs.type }}" == "MILESTONE" ]; then
            html="<li class='timeline-item'><div class='timeline-icon'>⭐</div><span class='timeline-date'>${timestamp}</span><p class='timeline-content'>${{ steps.extract.outputs.text }}</p></li>"
          elif [ "${{ steps.extract.outputs.type }}" == "LAB_LOG" ]; then
            html="<li class='timeline-item'><div class='timeline-icon'>🔬</div><span class='timeline-date'>${timestamp}</span><p class='timeline-content'><b>[实验日志]</b> ${{ steps.extract.outputs.text }}</p></li>"
          elif [ "${{ steps.extract.outputs.type }}" == "FINANCE_LOG" ]; then
            html="<li class='timeline-item'><div class='timeline-icon'>💰</div><span class='timeline-date'>${timestamp}</span><p class='timeline-content'><b>[财务]</b> ${{ steps.extract.outputs.item }} - <b>支出: ${{ steps.extract.outputs.amount }}</b>. 备注: ${{ steps.extract.outputs.notes }}</p></li>"
          fi
          # This is a trick to pass multiline HTML to the next step
          echo "snippet<<EOF" >> $GITHUB_OUTPUT
          echo "$html" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Update HTML File
        if: steps.extract.outputs.type != 'UNKNOWN'
        run: |
          # Use a placeholder file to avoid complex sed escaping
          cp index.html updated_index.html
          
          if [ "${{ steps.extract.outputs.type }}" == "DATA_UPDATE" ]; then
            # Perform data updates here if needed in the future
            echo "Performing data update..."
          elif [ -n "${{ steps.html_snippet.outputs.snippet }}" ]; then
             # Insert the new timeline item
             awk -v snippet="${{ steps.html_snippet.outputs.snippet }}" '/<ul class="timeline" id="project-timeline">/ {print; print snippet; next} 1' updated_index.html > index.html
             rm updated_index.html
          fi
          
      - name: Update Timestamp and Commit
        if: steps.extract.outputs.type != 'UNKNOWN'
        run: |
          timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          sed -i "s|<span id=\"update-time\">.*</span>|<span id=\"update-time\">${timestamp}</span>|" index.html
          
          git config --global user.name 'Lazarus Diary Bot'
          git config --global user.email 'bot@lazarus.project'
          git add index.html
          if ! git diff --staged --quiet; then
            git commit -m "Automated Diary Update: ${{ steps.extract.outputs.type }} via issue #${{ github.event.issue.number }}"
            git push
          else
            echo "No changes to commit."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.LAZARUS_TOKEN }}
          
      - name: Close the Issue
        if: steps.extract.outputs.type != 'UNKNOWN'
        uses: peter-evans/close-issue@v3
        with:
          comment: "感谢你的更新，合伙人。我已经将这个事件/数据记录到了我们的日记中。✅"
